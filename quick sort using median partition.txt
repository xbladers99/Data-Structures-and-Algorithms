#include<iostream>
using namespace std;
#include<algorithm>

int partition (int arr[], int low, int high) 
{ 
	int pivot = arr[high];  
	int i = (low - 1); 

	for (int j = low; j <= high- 1; j++) 
	{ 
		if (arr[j] <= pivot) 
		{ 
			i++; 
			swap(arr[i],arr[j]); 
		} 
	} 
	swap(arr[i + 1], arr[high]); 
	return (i + 1); 
} 

int partition_r(int arr[], int low, int high) 
{ 
   int  mid= low+ (high-low)/2;
    
	if(((arr[low]>arr[mid])&& (arr[low]<arr[high]))||((arr[low]<arr[mid])&& (arr[low]>arr[high])))
	swap(arr[low],arr[high]);
	
	if(((arr[low]<arr[mid])&& (arr[mid]<arr[high]))||((arr[low]>arr[mid])&& (arr[mid]>arr[high])))
	swap(arr[mid],arr[high]);
	
    
    return partition(arr, low, high);
} 

void quickSort(int arr[], int low, int high) 
{ 
	if (low < high) 
	{ 
		int pi = partition_r(arr, low, high); 
		
		quickSort(arr, low, pi - 1); 
		quickSort(arr, pi + 1, high); 
	} 
} 



void printArray(int arr[], int size) 
{ 
	int i; 
	for (i=0; i < size; i++) 
		cout<<arr[i]<<" "; 
} 


int main() 
{ 
	int arr[] = {3,0,12,10, 7, 8, 9, 1, 5}; 
	int n = sizeof(arr)/sizeof(arr[0]); 
	quickSort(arr, 0, n-1); 
	printArray(arr, n); 
	return 0; 
} 
